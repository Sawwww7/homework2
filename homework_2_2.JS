undefined + 1;
/*// результат: NaN // number; console.log(typeof undefined) // undefined; 
NaN (Not a Number) — це є результат неправильної або невизначеної математичної операції (помилки).
*/
"true" == true;
/* 
результат: false //boolean; console.log(typeof 'true') // string; console.log(typeof true) //boolean;
//'true' == true при порівнянні значення різних типів, значення конвертуються в числа.
'true' конвертуєтся в NaN,  true в 1. Потім JavaScript робить строге порівняння NaN === 1 // результат:  false;
*/

false == "false";
/* 
результат: false //boolean; console.log(typeof false) //boolean; console.log(typeof 'false') // string; 
//false == 'false' при порівнянні значення різних типів, значення конвертуються в числа.
false в 0, 'false' конвертуєтся в NaN. Потім JavaScript робить строге порівняння 0 === NaN // результат:  false;
*/

null == "";
/* результат: false //boolean;  null //null; console.log(typeof '') //string;
//null == '' при порівнянні значення різних типів, значення конвертуються в числа.
Поведінка null під час порівняння з іншими значеннями — особлива.
При нестрогому порівнянні == значень null діє окреме правило:
null не перетворюються на інші типи, null не рівнe будь-чому іншому.
'' конвертуєтся в 0.
*/

3 ** (9 / 3);
/* результат: 27 // number; 3,9,3 // number;
Спершу виконується дія в душках 9/3 = 3.
 Потім JavaScript застосовує оператор Exponentiation ** (піднесення до степеня)
  3 ** 3 результат 27.*/

!!"false" == !!"true";
/* результат: true // boolean; console.log(typeof "false") // string;  console.log(typeof "true") // string; 
// !! подвійне НЕ, яке рядок перетворює на булевий тип true.
true == true  // true
*/

0 || ("0" && 1);
/* //результат: 1 // number; console.log(typeof "0") // string;
// Спочатку виконується дія в дужках ("0" && 1) Оператор && повертає  останнє значення,
 якщо жодного хибного не було знайдено, тобто повертає: 1.
 Потім Оператор || обчислює вираз  0 || 1 // 0 хибне значення тому повертає 1 (перше правдиве значення).
*/
1 < 2 < 3;
/* //результат: true // boolean; 1,2,3 // number;  < оператор порівняння.
Результатом порівняння є логічний тип */

"foo" + +(+"bar");
/* //результат: fooNaN // string; "foo" // string; "bar" // string;

/Результатом  +"bar" є NaN //  якщо операнд не є числом, унарний плюс перетворить його на число.
Потім JavaScript виконує конкатенація  "foo" + NaN
*/

3 ** 2 / 3;
/* результат: 3 // number; 3,2,3 // number;
Спершу JavaScript застосовує оператор Exponentiation ** (піднесення до степеня)
  3 ** 2 результат 9.
  Потім математичну операцію ділення 9/3 = 3. */

1 < 2 > 3
/* //результат: false // boolean; 1,2,3 // number;
1 < 2 // true
2 > 3 //false*/

(+null == false) < 1;
/* //результат: false // boolean;  null //null; false // boolean;
// +null  операнд не є числом, унарний плюс перетворить його на число 0.
// Порівняння == не відрізняє 0 від false, тому результатом (0 == false) буде true.
При порівнянні значення різних типів true < 1, значення конвертуються в числа (true конвертується в 1).
остання дія це порівняння 1 < 1 результат якої false.
*/

(false && true) || true;
/* //результат: true // boolean;
Спочатку виконується дія в дужках (false && true) поверне false. // Оператор && повертає true, 
якщо обидва оператори є правдивими, і false в іншому випадку. 
Потім  обчислюється вираз: false || true // оператором || повертає true, якщо хочаб один операнд  true.
*/

false && (true || true);
/* //результат: false // boolean;
Спочатку виконується дія в дужках (true || true) // оператором || повертає true, якщо хочаб один операнд  true.
Потім обчислюється вираз: (false && true) поверне false. // Оператор && повертає true, 
якщо обидва оператори є правдивими, і false в іншому випадку. 
*/

(+null == false) < 1 ** 5;
/* //результат: false // boolean;
// +null  операнд не є числом, унарний плюс перетворить його на число 0.
// Порівняння == не відрізняє 0 від false, тому результатом (+null == false) буде true.
// JavaScript застосовує оператор Exponentiation ** (піднесення до степеня)
  1 ** 5 результат 1.
  Потім іде порівняння  true < 1 // результат false  // При порівнянні значення різних типів, значення конвертуються в числа. true  конвертуються в 1.
  
*/
