"number" + 23 + 32;
 /*// результат: number2332; console.log(typeof 23) // number; console.log(typeof 32) // number; console.log(typeof "number") // string;  
Бінарний + у виразі, де один з операндів є рядком — перетворює всі операнди на рядки і така поведінка має назву — конкатенація.*/

41 + 1 + "number";
   /*// результат: 42number; console.log(typeof 41) // number; console.log(typeof 1) // number; console.log(typeof "number") // string;  
В першу чергу JavaScript виконує операцію додавання 41+1. У виразі 41 + 1, оператор + виконує операцію додавання над операндами 41 і 1, повертаючи результат 42.
Потім JavaScript виконує конкатенація 42 + "number". */

null + 1; 
  /*// результат: 1; console.log(typeof null) // null; 
  //null — спеціальне значення яке формує окремий власний тип, який містить лише значення null . 
  Воно виражає нульове «порожнє» або невідоме значення. 
У виразі null + 1, оператор + виконує операцію додавання над операндами null і 1, повертаючи результат 1.*/

"five" + + "two"; /* // результат: fiveNaN // string;  //console.log(typeof "five") // string; //console.log("two") // string;
 // "two" операнд не є числом, унарний плюс перетворить його на число NaN //Бінарний + робить конкатенацію, бо один з операндів є рядком.*/

2 && 7 + "40" +  +"2"; 
    /*// результат: 7402 // string;  В першу чергу JavaScript застосовуе логічний оператор && над оперантами 2 і 7.
 2 і 7 є правдивими значеннями. У такому випадку логічний оператор && повертає останнє значення 7, так як жодного хибного не було знайдено;
 console.log(typeof"2") // string; // "2" операнд не є числом, унарний плюс перетворить його на число 2;
  Потім JavaScript виконує конкатенація 7 + "40" + 2, тому що у виразі де один з операндів "40" є рядком — перетворює всі операнди на рядки */

"10" - 5 === 6;
 /*// результат: false //boolean; //В першу чергу виконується не явне перетворення "10" з типом данних string в тип данних number.
 Потім JavaScript виконує математичну операцію віднімання 10 - 5, результатом якої є 5.
 Потім робить порівняння оператором стогої рівності 5 === 6, результат порівняння false*/

true + false;
   /*// результат: 1 // number;  //console.log(typeof true)// boolean; //В першу чергу виконується не явне перетворення true в 1, а folse в 0.
Потім JavaScript виконує математичну операцію додавання 1 + 0*/

"4px" - 3;
/* // результат: NaN // number; console.log(typeof "4px") // string; console.log(typeof 3) // number;
NaN (Not a Number) — це є результат неправильної або невизначеної математичної операції (помилки), будь-яка подальша операція з NaN повертає NaN*/

"4" -  3; 
/* // результат: 1  // number; //В першу чергу виконується не явне перетворення "4" з типом данних string в тип данних number.
 Потім JavaScript виконує математичну операцію віднімання 4 - 3, результатом якої є 1.*/

"2" + 3 ** 2; 
/* //результат: 29 // string; //console.log(typeof "2") // string; // Спочатку JavaScript застосовує оператор Exponentiation ** (піднесення до степеня) 3 ** 2 результат 9.
Через бінарний + у виразі, де один з операндів є рядком, JavaScript виконує конкатенацію 2 та 9. результат конкатенації 29 */

12 / "6";
 /* //результат: 2 // number; //console.log(typeof "6") // string; //В першу чергу виконується не явне перетворення "6" з типом данних string в тип данних number.
Потім JavaScript виконує математичну операцію ділення 12 - 6, результатом якої є 2.*/

23 + 42 + "number";
 /* // результат: 65number  // string; // console.log(typeof 23) // number; console.log(typeof 42) // number; console.log(typeof "number") // string;
 В першу чергу JavaScript виконує операцію додавання 23+42. У виразі 23 + 42, оператор + виконує операцію додавання над операндами 23 і 42, повертаючи результат 65.
Потім JavaScript виконує конкатенація 65 + "number".  */

"10" + (5 === 6);
/* // результат: 10false // string; //console.log(typeof "10") // string;  //Спершу відбуваєтся порівняння  оператором стогої рівності 5 === 6, результат порівняння false.
Потім JavaScript виконує конкатенацію "10" та false. 
 */

"number" + 15 + 3; 
/* // результат: number153 // string;

console.log(typeof "number") // string; console.log(typeof 15) // number; console.log(typeof 3) // number;

Бінарний + у виразі, де один з операндів є рядком — перетворює всі операнди на рядки


*/
